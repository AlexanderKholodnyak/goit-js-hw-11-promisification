{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,IAAMA,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,GAChBC,WAAW,WAAQD,EAAQF,IAAOA,MAKpCI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACcjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAzBA,IAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GACxB,OAAA,IAAIb,QAAQ,SAACC,EAASa,GAIzBb,EAHqBW,EAASG,IAAI,SAAAC,GAC9BA,OAAAA,EAAKP,OAASI,EAAgBG,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCN,QAASM,EAAKN,SAAWM,QASnEb,EAAS,SAAAc,GAAgBZ,OAAAA,QAAQa,MAAMD,IAK7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC1BnC,IAAMgB,EAA4B,SAACC,EAAKC,GAC7BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGlDK,EAAkB,SAAAC,GACd5B,IAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,SAACC,EAASa,GACzBZ,WAAW,WACYoB,KAAKE,SAAW,IAG/BvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAIvB,KAAMN,IAGxCgB,EAAOY,EAAYC,KAEpB7B,MAIL8B,EAAa,SAAkB,GAAfD,IAAAA,EAAAA,EAAAA,GAAIvB,EAAAA,EAAAA,KACtBC,QAAQC,IAAmBqB,eAAAA,OAAAA,EAAmBvB,kBAAAA,OAAAA,EAA9C,SAGEyB,EAAW,SAAAF,GACbtB,QAAQyB,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAGJF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH;;AC/BhE,aAJA,QAAA,gBAEA,QAAA,kBACA,QAAA,kBACA,QAAA","file":"src.f1b02536.js","sourceRoot":"..\\src","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => { resolve(ms) }, ms);\r\n    })\r\n\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","  \r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers);\r\n    \r\n    });\r\n        \r\n};\r\n\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            }\r\n\r\n            reject(transaction.id);\r\n             \r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","import './styles.css';\r\n\r\nimport './js/task-1.js';\r\nimport './js/task-2.js';\r\nimport './js/task-3.js';"]}